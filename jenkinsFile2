pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Docker-ID') 
        FRONTEND_IMAGE = "maryam2904/project2023-frontend"
        BACKEND_IMAGE = "maryam2904/project2023-backend"
        DOCKER_TAG = "latest"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    sh 'mkdir -p backend'
                    dir('backend') {
                        git url: 'https://github.com/maryem012/PROJECT2023.git', branch: 'backend'
                    }
                    echo 'Repositories Cloned'
                }
            }
        }

        stage('Setup Node.js') {
            steps {
                script {
                    sh '''
                        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                        sudo apt-get install -y nodejs
                        node --version
                        npm --version
                    '''
                }
            }
        }

        stage('Frontend Dependencies') {
            steps {
                script {
                    sh '''
                        npm install --legacy-peer-deps
                        npm audit fix --force || true
                        export PATH="$PATH:$(pwd)/node_modules/.bin"
                        ng version
                    '''
                    echo 'Frontend dependencies installed'
                }
            }
        }

        stage('Frontend Build') {
            steps {
                script {
                    sh '''
                        export PATH="$PATH:$(pwd)/node_modules/.bin"
                        ng build --configuration production
                    '''
                    echo 'Frontend built successfully'
                }
            }
        }

        stage('Backend Dependencies') {
            steps {
                dir('backend') {
                    script {
                        sh '''
                            npm install
                            npm audit fix --force || true
                        '''
                        echo 'Backend dependencies installed'
                    }
                }
            }
        }

        stage('Backend Build') {
            steps {
                dir('backend') {
                    script {
                        sh '''
                            npm run build
                        '''
                        echo 'Backend built successfully'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Frontend Docker build
                    sh """
                        sudo docker build -t ${FRONTEND_IMAGE}:${DOCKER_TAG} .
                    """
                    echo 'Frontend Docker image built'

                    // Backend Docker build
                    dir('backend') {
                        sh """
                            sudo docker build -t ${BACKEND_IMAGE}:${DOCKER_TAG} .
                        """
                        echo 'Backend Docker image built'
                    }
                }
            }
        }

        stage('Docker Login and Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Docker-ID', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                            echo '$DOCKER_PASSWORD' | sudo docker login -u '$DOCKER_USERNAME' --password-stdin
                            sudo docker push ${FRONTEND_IMAGE}:${DOCKER_TAG}
                            sudo docker push ${BACKEND_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo 'Pipeline succeeded! Docker images pushed to registry'
            }
        }
        failure { 
            script {
                echo 'Pipeline failed!'
            }
        }
        always {
            script {
                sh '''
                    sudo docker logout || true
                    rm -rf node_modules package-lock.json
                    cd backend && rm -rf node_modules package-lock.json || true
                '''
                cleanWs()
            }
        }
    }
}
