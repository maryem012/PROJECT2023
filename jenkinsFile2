pipeline {
    agent any
    

    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Docker-ID')
        FRONTEND_IMAGE = "maryam2904/project2023-frontend"
        BACKEND_IMAGE = "maryam2904/project2023-backend"
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Verify Node.js and npm installation
                    sh '''
                        node --version
                        npm --version
                        docker --version
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    // Checkout main branch (frontend)
                    checkout scm
                    
                    // Create and checkout backend directory
                    sh 'mkdir -p backend'
                    dir('backend') {
                        git url: 'https://github.com/maryem012/PROJECT2023.git', branch: 'backend'
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                script {
                    try {
                        sh '''
                            npm install --legacy-peer-deps
                            npm run build
                        '''
                    } catch (Exception e) {
                        echo "Frontend build failed: ${e.getMessage()}"
                        error "Frontend build failed"
                    }
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                dir('backend') {
                    script {
                        try {
                            sh '''
                                npm install
                                npm run build
                            '''
                        } catch (Exception e) {
                            echo "Backend build failed: ${e.getMessage()}"
                            error "Backend build failed"
                        }
                    }
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    try {
                        // Ensure Docker is logged in
                        withCredentials([usernamePassword(credentialsId: 'Docker-ID', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh """
                                echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin
                            """
                        }
                        
                        // Frontend Docker Build and Push
                        sh """
                            docker build -t ${FRONTEND_IMAGE}:${DOCKER_TAG} .
                            docker tag ${FRONTEND_IMAGE}:${DOCKER_TAG} ${FRONTEND_IMAGE}:latest
                            docker push ${FRONTEND_IMAGE}:${DOCKER_TAG}
                            docker push ${FRONTEND_IMAGE}:latest
                        """
                        
                        // Backend Docker Build and Push
                        dir('backend') {
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${DOCKER_TAG} .
                                docker tag ${BACKEND_IMAGE}:${DOCKER_TAG} ${BACKEND_IMAGE}:latest
                                docker push ${BACKEND_IMAGE}:${DOCKER_TAG}
                                docker push ${BACKEND_IMAGE}:latest
                            """
                        }
                    } catch (Exception e) {
                        echo "Docker build/push failed: ${e.getMessage()}"
                        error "Docker build/push failed"
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker logout || true'
            cleanWs()
        }
        
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
