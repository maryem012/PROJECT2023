pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Docker-ID')
        FRONTEND_IMAGE = "maryam2904/project2023-frontend"
        DOCKER_IMAGE = "maryam2904/project2023-frontend"
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Repository Cloned'
            }
        }
        
      stage('Setup Environment') {
    steps {
        script {
            sh '''
                # Install Node.js
                curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                apt-get install -y nodejs
                
                # Install Angular CLI globally
                npm install -g @angular/cli
                
                # Verify installations
                node --version
                npm --version
                ng version
            '''
        }
    }
}
        
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        # Install project dependencies
                        npm install --legacy-peer-deps
                        npm audit fix --force || true
                    '''
                }
            }
        }
        
        stage('Build Angular App') {
            steps {
                script {
                    sh '''
                        # Ensure Angular CLI is in PATH
                        export PATH="$PATH:$(pwd)/node_modules/.bin"
                        
                        # Build production version
                        ng build --configuration production
                    '''
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    sh """
                        # Build Docker image
                        docker context use desktop-linux
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Docker-ID', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                            # Login to Docker Hub
                            echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin
                            
                            # Push images
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded! Docker image pushed to registry'
        }
        failure { 
            echo 'Pipeline failed! Check logs for details'
        }
        always {
            sh 'docker logout || true'
            cleanWs()  // Clean workspace
        }
    }
}
