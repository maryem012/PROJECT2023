pipeline {
    agent any
    

    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Docker-ID')
        FRONTEND_IMAGE = "maryam2904/project2023-frontend"
        BACKEND_IMAGE = "maryam2904/project2023-backend"
        DOCKER_TAG = "${GIT_COMMIT_SHORT}"
        NODE_VERSION = '18.16.0'
        ANGULAR_CLI_VERSION = '17.3.8'
    }
    
    stages {
        stage('Environment Setup') {
            steps {
                script {
                    sh '''
                        node -v
                        npm -v
                        pwd
                        ls -la
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
                sh 'mkdir -p backend'
                dir('backend') {
                    git url: 'https://github.com/maryem012/PROJECT2023.git', branch: 'backend'
                }
            }
        }
        
        stage('Workspace Preparation') {
            steps {
                script {
                    sh '''
                        chmod -R 777 .
                        mkdir -p node_modules
                    '''
                }
            }
        }
        
stage('Frontend Dependencies') {
    steps {
        script {
            try {
                sh '''
                    npm cache clean --force
                    rm -rf node_modules package-lock.json
                    
                    # Install Angular CLI locally (matching your project version)
                    npm install @angular/cli@16.1.0
                    
                    # Add local node_modules/.bin to PATH
                    export PATH="$PATH:./node_modules/.bin"
                    
                    # Install dependencies
                    npm install --legacy-peer-deps --verbose
                '''
            } catch (Exception e) {
                echo "Dependencies installation failed: ${e.getMessage()}"
                sh 'cat /var/lib/jenkins/.npm/_logs/*-debug-0.log || true'
                error "Dependencies installation failed"
            }
        }
    }
}
        
        stage('Frontend Build') {
            steps {
                script {
                    try {
                        sh '''
                            # Build frontend
                            ng build --configuration production
                        '''
                    } catch (Exception e) {
                        echo "Frontend build failed: ${e.getMessage()}"
                        error "Frontend build failed"
                    }
                }
            }
        }
        
        stage('Backend Dependencies') {
            steps {
                dir('backend') {
                    script {
                        try {
                            sh '''
                                npm cache clean --force
                                rm -rf node_modules package-lock.json
                                npm install --verbose
                            '''
                        } catch (Exception e) {
                            echo "Backend dependencies installation failed: ${e.getMessage()}"
                            error "Backend dependencies installation failed"
                        }
                    }
                }
            }
        }
        
        stage('Backend Build') {
            steps {
                dir('backend') {
                    script {
                        try {
                            sh '''
                                npm run build
                            '''
                        } catch (Exception e) {
                            echo "Backend build failed: ${e.getMessage()}"
                            error "Backend build failed"
                        }
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    // Frontend Docker Build
                    sh """
                        docker context use desktop-linux
                        docker build -t ${FRONTEND_IMAGE}:${DOCKER_TAG} .
                        docker tag ${FRONTEND_IMAGE}:${DOCKER_TAG} ${FRONTEND_IMAGE}:latest
                    """
                    
                    // Backend Docker Build
                    dir('backend') {
                        sh """
                            docker build -t ${BACKEND_IMAGE}:${DOCKER_TAG} .
                            docker tag ${BACKEND_IMAGE}:${DOCKER_TAG} ${BACKEND_IMAGE}:latest
                        """
                    }
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Docker-ID', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                            echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin
                            
                            docker push ${FRONTEND_IMAGE}:${DOCKER_TAG}
                            docker push ${FRONTEND_IMAGE}:latest
                            
                            docker push ${BACKEND_IMAGE}:${DOCKER_TAG}
                            docker push ${BACKEND_IMAGE}:latest
                        """
                    }
                }
            }
        }
        
        stage('Docker Cleanup') {
            steps {
                script {
                    sh '''
                        docker logout || true
                        docker system prune -f
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded! Docker images built and pushed successfully'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
        always {
            cleanWs()
        }
    }
}
