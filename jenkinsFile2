pipeline {
    agent any
    
    options {
        // Increase build timeout
        timeout(time: 30, unit: 'MINUTES')
        // Prevent concurrent builds
        disableConcurrentBuilds()
        // Keep limited number of build logs
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    
    environment {
        // Docker Hub Credentials
        DOCKERHUB_CREDENTIALS = credentials('Docker-ID')
        
        // Image Names
        FRONTEND_IMAGE = "maryam2904/project2023-frontend"
        BACKEND_IMAGE = "maryam2904/project2023-backend"
        
        // Build Tag
        DOCKER_TAG = "${BUILD_NUMBER}"
        
        // Node.js Memory Configuration
        NODE_OPTIONS = '--max_old_space_size=8192'
    }
    
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    sh '''
                        # Update system packages
                        sudo apt-get update
                        
                        # Install/Update Node.js and npm
                        sudo apt-get install -y nodejs npm
                        
                        # Update npm to latest
                        npm install -g npm@latest
                        
                        # Install global Angular CLI
                        npm install -g @angular/cli
                        
                        # Verify installations
                        node --version
                        npm --version
                        ng version
                        docker --version
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    // Checkout main project
                    checkout scm
                    
                    // Checkout backend
                    sh 'mkdir -p backend'
                    dir('backend') {
                        git url: 'https://github.com/maryem012/PROJECT2023.git', branch: 'backend'
                    }
                    
                    // Debug: Show directory contents
                    sh '''
                        echo "Frontend Directory:"
                        ls -la
                        echo "Backend Directory:"
                        ls -la backend
                    '''
                }
            }
        }
        
        stage('Frontend Dependencies') {
            steps {
                script {
                    sh '''
                        # Clear npm cache
                        npm cache clean --force
                        
                        # Install frontend dependencies
                        npm install --legacy-peer-deps
                        
                        # List installed packages
                        npm list --depth=0
                    '''
                }
            }
        }
        
        stage('Frontend Build') {
            steps {
                script {
                    sh '''
                        # Set high memory limit
                        export NODE_OPTIONS=--max_old_space_size=8192
                        
                        # Build Angular application
                        ng build --configuration=production --verbose
                    '''
                }
            }
        }
        
        stage('Backend Dependencies') {
            steps {
                dir('backend') {
                    script {
                        sh '''
                            # Clear npm cache
                            npm cache clean --force
                            
                            # Install backend dependencies
                            npm install
                            
                            # List installed packages
                            npm list --depth=0
                        '''
                    }
                }
            }
        }
        
        stage('Backend Build') {
            steps {
                dir('backend') {
                    script {
                        sh '''
                            # Build backend
                            npm run build
                        '''
                    }
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    // Switch to desktop-linux docker context
                    sh 'docker context use desktop-linux || true'
                    
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'Docker-ID', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                            echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin
                        """
                    }
                    
                    // Frontend Docker Build and Push
                    sh """
                        docker build \
                            --build-arg NODE_OPTIONS=--max_old_space_size=8192 \
                            -t ${FRONTEND_IMAGE}:${DOCKER_TAG} .
                        docker tag ${FRONTEND_IMAGE}:${DOCKER_TAG} ${FRONTEND_IMAGE}:latest
                        docker push ${FRONTEND_IMAGE}:${DOCKER_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                    """
                    
                    // Backend Docker Build and Push
                    dir('backend') {
                        sh """
                            docker build \
                                --build-arg NODE_OPTIONS=--max_old_space_size=8192 \
                                -t ${BACKEND_IMAGE}:${DOCKER_TAG} .
                            docker tag ${BACKEND_IMAGE}:${DOCKER_TAG} ${BACKEND_IMAGE}:latest
                            docker push ${BACKEND_IMAGE}:${DOCKER_TAG}
                            docker push ${BACKEND_IMAGE}:latest
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded! Images built and pushed successfully.'
            
            // Optional: Send notification
            // mail to: 'your-email@example.com',
            //      subject: "Successful Pipeline: ${currentBuild.fullDisplayName}",
            //      body: "Great job! Pipeline completed successfully."
        }
        
        failure {
            echo 'Pipeline failed. Check the logs for detailed error messages.'
            
            // Optional: Send failure notification
            // mail to: 'your-team@example.com',
            //      subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
            //      body: "Check Jenkins logs for details."
        }
        
        always {
            // Cleanup steps
            sh '''
                docker logout || true
                docker system prune -f || true
            '''
            
            // Clean workspace
            cleanWs()
        }
    }
}
